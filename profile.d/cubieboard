push @EXPORT_OK, qw/boot restore rootfs fixes base u_boot rootssh/;
# using qemu seems to be useless... with --debug parameter, the number of
# failed execv is still the same
#@pacman = (qw/qemu-arm -E/, "LD_LIBRARY_PATH=$target/usr/lib", "$target/usr/lib/ld-linux.so.3", "$target/usr/bin/pacman") unless $arch =~ m/arm/;
$arch = 'armv7h';

my %files = (
        archlinux => "http://archlinuxarm.org/os/ArchLinuxARM-sun4i-latest.tar.gz",
        kernel => "http://dl.linux-sunxi.org/users/amery/sunxi-3.0/latest/cubieboard_hwpack.tar.xz",
        bootloader => "http://archlinuxarm.org/os/sun4i/cubieboard-bootloader.tar.gz",
        a10_display => "https://raw.github.com/mortaromarcello/a10-display/master/a10_display.c",
    );

my $bootloader;
my $archlinux;
my $kernel;
my $a10_display;

sub boot {
    die "error: make device bootable needs a path to a device" unless $device;
    $bootloader = download $files{bootloader};
    decompress $bootloader, $tmp;
    # Backup
    dd(
            if => $device,
            of => "boot.bak",
            skip => 1,
            nowarn => 1, # we expect to go too far
            limit => 2048, # sector 2048 not included
        );
    # Purge the white space after the MBR until the first partion
    dd(
            if => "/dev/zero",
            of => $device,
            seek => 1,
            nowarn => 1, # we expect to go too far
            limit => 2048, # sector 2048 not included
        );
    # Copy the SPL
    dd(
            if => "$tmp/cubieboard/sunxi-spl.bin",
            of => $device,
            bs => 1024,
            seek => 8,
            limit => 1024, # sector 2048 not included
        );
    # Copy u-boot
    dd(
            if => "$tmp/cubieboard/u-boot.bin",
            of => $device,
            bs => 1024,
            seek => 32,
            limit => 1024, # sector 2048 not included
        );
}

sub restore {
    die "error: make device bootable needs a path to a device" unless $device;
    die "error: backup file is missing" unless -e "boot.bak";
    dd(
            if => "boot.bak",
            of => $device,
            seek => 1,
            nowarn => 1, # we expect to go too far
            limit => 2048, # sector 2048 not included
        );
}

sub rootfs {
    $archlinux = download $files{archlinux};
    $kernel = download $files{kernel};
    mkdir $target;
    rmtree "$target/*" if -e $target;
    decompress $archlinux, $target;
    convert_links "$target/usr/lib";
    pacman qw/-R linux-headers-sun4i linux-sun4i mkinitcpio mkinitcpio-busybox uboot-mkimage netcfg openntpd/;
    ln '.', "$target/rootfs";
    ln 'boot', "$target/kernel";
    decompress $kernel, $target;
}

sub u_boot {
    rmtree "$target/boot/boot.scr*";
    open BOOT, '>', "$target/boot/boot.cmd" or confess $!;
    print BOOT <<EOF;
setenv bootargs console=tty0 console=ttyS0,115200 hdmi.audio=EDID:0 root=/dev/mmcblk0p1 rootwait panic=10 init=/usr/lib/systemd/systemd
ext2load mmc 0 0x43000000 boot/script.bin
ext2load mmc 0 0x48000000 boot/uImage
bootm 0x48000000
EOF
    close BOOT;
    safe_system qw/mkimage -C none -A arm -T script -d/, 
        "$target/boot/boot.cmd", "$target/boot/boot.scr";
}

sub fixes {
    rmtree "$target/bin" if -d "$target/bin";
    rmtree "$target/sbin" if -d "$target/sbin";
    rmtree "$target/usr/sbin" if -d "$target/usr/sbin";
    rmtree "$target/etc/network.d" if -d "$target/etc/network.d";
    convert_links "$target/usr/lib";
}

sub base {
    $a10_display = download $files{a10_display};
    cp $a10_display, "$target/root/";
    pacman qw/-S fbset/;
    pacman qw/-S pulseaudio pulseaudio-alsa/;
    pacman qw/-S netctl ifplugd wpa_actiond openntpd/;
    pacman qw/-S gcc fakeroot make pkg-config autoconf automake/;
    cp "$target/etc/netctl/examples/ethernet-dhcp", "$target/etc/netctl/";
    ln '/usr/lib/systemd/system/netctl-ifplugd@.service', $target.'/etc/systemd/system/multi-user.target.wants/netctl-ifplugd@eth0.service';
    ln '/usr/lib/systemd/system/netctl-auto@.service', $target.'/etc/systemd/system/multi-user.target.wants/netctl-auto@wlan0.service';
    #ln '../netctl@ethernet\x2ddhcp.service', $target.'/etc/systemd/system/multi-user.target.wants/netctl@ethernet\x2ddhcp.service';
}

sub rootssh {
    unless( $sshkey) {
        warn "warning: missing ssh public key file, ssh step skipped\n";
        return
    }
    mkdir "$target/root/.ssh", 0700;
    open KEYPUB,$sshkey;
    my $public_key = <KEYPUB>;
    print "ssh public key used:\n$public_key";
    my $authorized_keys = "$target/root/.ssh/authorized_keys";
    my $mode = -f $authorized_keys ? '+<' : '+>';
    open AUTHORIZED_KEYS,$mode,$authorized_keys
        or die "error: $authorized_keys: $!\n";
    chmod 0600, $authorized_keys;
    my $key_exists = 0;
    $key_exists |= $_ eq $public_key while <AUTHORIZED_KEYS>;
    if( $key_exists ) {
        warn "info: key already present in the file, ignored\n";
        return
    }
    print AUTHORIZED_KEYS $public_key;
}

sub all {
    boot if $device;
    mount if $partition;
    rootfs;
    hostname if $hostname;
    fixes;
    upgrade;
    pacnew;
    u_boot;
    base;
    rootssh;
    umount if $partition;
}

# vim:filetype=perl:
