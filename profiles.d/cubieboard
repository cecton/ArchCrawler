our @EXPORT_OK = qw/boot restore rootfs fixes base x dev u_boot/;
# using qemu seems to be useless... with --debug parameter, the number of
# failed execv is still the same
#@pacman = (qw/qemu-arm -E/, "LD_LIBRARY_PATH=$target/usr/lib", "$target/usr/lib/ld-linux.so.3", "$target/usr/bin/pacman") unless $arch =~ m/arm/;
$arch = 'armv7h';

my %files = (
        archlinux => "http://archlinuxarm.org/os/ArchLinuxARM-sun4i-latest.tar.gz",
        kernel => "http://dl.linux-sunxi.org/users/amery/sunxi-3.0/latest/cubieboard_hwpack.tar.xz",
        bootloader => "http://archlinuxarm.org/os/sun4i/cubieboard-bootloader.tar.gz",
    );

my $bootloader;
my $archlinux;
my $kernel;

sub boot {
    die "error: make device bootable needs a path to a device" unless $device;
    $bootloader = download $files{bootloader};
    decompress $bootloader, $tmp;
    # Backup
    dd(
            if => $device,
            of => "boot.bak",
            skip => 1,
            nowarn => 1, # we expect to go too far
            limit => 2048, # sector 2048 not included
        );
    # Purge the white space after the MBR until the first partion
    dd(
            if => "/dev/zero",
            of => $device,
            seek => 1,
            nowarn => 1, # we expect to go too far
            limit => 2048, # sector 2048 not included
        );
    # Copy the SPL
    dd(
            if => "$tmp/cubieboard/sunxi-spl.bin",
            of => $device,
            bs => 1024,
            seek => 8,
            limit => 1024, # sector 2048 not included
        );
    # Copy u-boot
    dd(
            if => "$tmp/cubieboard/u-boot.bin",
            of => $device,
            bs => 1024,
            seek => 32,
            limit => 1024, # sector 2048 not included
        );
}

sub restore {
    die "error: make device bootable needs a path to a device" unless $device;
    die "error: backup file is missing" unless -e "boot.bak";
    dd(
            if => "boot.bak",
            of => $device,
            seek => 1,
            nowarn => 1, # we expect to go too far
            limit => 2048, # sector 2048 not included
        );
}

sub rootfs {
    $archlinux = download $files{archlinux};
    $kernel = download $files{kernel};
    mkdir $target;
    rmtree "$target/*" if -e $target;
    if( $device ) {
        confess "todo: should mount $device";
        #mount $device, $target;
    }
    decompress $archlinux, $target;
    convert_links "$target/usr/lib";
    pacman qw/-R linux-headers-sun4i linux-sun4i mkinitcpio mkinitcpio-busybox uboot-mkimage/;
    ln '.', "$target/rootfs";
    ln 'boot', "$target/kernel";
    decompress $kernel, $target;
    if( $device ) {
        #umount $target;
    }
}

sub u_boot {
    rmtree "$target/boot/boot.scr*";
    open BOOT, '>', "$target/boot/boot.cmd" or confess $!;
    print BOOT <<EOF;
setenv bootargs console=tty0 console=ttyS0,115200 hdmi.audio=EDID:0 root=/dev/mmcblk0p1 rootwait panic=10 init=/usr/lib/systemd/systemd
ext2load mmc 0 0x43000000 boot/script.bin
ext2load mmc 0 0x48000000 boot/uImage
bootm 0x48000000
EOF
    close BOOT;
    safe_system qw/mkimage -C none -A arm -T script -d/, 
        "$target/boot/boot.cmd", "$target/boot/boot.scr";
}

sub fixes {
    rmtree "$target/bin" if -e "$target/bin";
    #symlink "usr/bin","$target/bin";
    rmtree "$target/sbin" if -e "$target/sbin";
    #symlink "usr/bin","$target/sbin";
    rmtree "$target/usr/sbin" if -e "$target/usr/sbin";
    #symlink "bin","$target/usr/sbin";
    convert_links "$target/usr/lib";
    #pacman qw/-S xfsprogs/;
}

sub base {
    pacman qw/-S pulseaudio pulseaudio-alsa/;
}

sub x {
    pacman qw/-S pulseaudio pulseaudio-alsa xorg-xset xorg-xsetroot xorg-xinit/;
}

sub dev {
    pacman qw/-S vim/;
    pacman qw/-R vi/;
    ln "vim", "$target/usr/bin/vi";
}

sub all {
    boot;
    rootfs;
    fixes;
    upgrade;
    pacnew;
    uboot;
    base;
    x;
    dev;
}

# vim:filetype=perl:
